@using H3WebshopBackend.Repository.Models;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedLocalStorage ProtectedLocalStore

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Space Crap ltd. A/S aps.</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-cart" aria-hidden="true"></span> Home
            </NavLink>
        </div>@*
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="login">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Login
            </NavLink>
        </div>*@
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="customers" Match="NavLinkMatch.All">
                <span class="oi oi-person" aria-hidden="true"></span> Customers
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="suppliers" Match="NavLinkMatch.All">
                <span class="oi oi-wrench" aria-hidden="true"></span> Suppliers
            </NavLink>
        </div>
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;
    Customer user = new();

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var result = await ProtectedLocalStore.GetAsync<Customer>("User");
            if (result.Success && result.Value != null)
            {
                user = result.Value;
            }
            StateHasChanged();
        }
    }
}
