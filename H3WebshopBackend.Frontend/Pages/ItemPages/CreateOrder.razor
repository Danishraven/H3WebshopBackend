@page "/cart"
@using H3WebshopBackend.Repository.Models.DTOs;
@using H3WebshopBackend.Frontend.Services;
@using H3WebshopBackend.Repository.Models;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedLocalStorage ProtectedLocalStore
@inject FrontEndCustomerService customerService
@inject FrontEndOrderService orderService

@if (isConnected)
{
    <div class="container">
        <h3>CreateOrder</h3>
        <div class="body">
            @if (!successfulOrder)
            {
                <p>The total price is $@totalPrice USD</p>
                <button @onclick="() => PlaceOrder()">Place Order</button>
                <p>
                    Select a customer to assign the order to:
                    <select @bind="@customer">
                        @if (customers != null)
                        {
                            <option value="">Select an option</option>
                            @foreach (var cust in customers)
                            {
                                <option value="@cust.Id.ToString()">@cust.Name</option>
                            }
                        }
                    </select>
                    <br>
                    @if (selectAnOption)
                    {
                        <b>Please select an option!</b>
                    }
                </p>
                <div>
                    <table style="width: 100%">
                        <tr style="position:absolute">
                            <td>
                                <h4>You have @shoppingCart.Count in cart.</h4>
                                <table>
                                    <thead>
                                        <tr>
                                            <th>Item Name</th>
                                            <th>Item Price</th>
                                            <th>Item Manufacturer</th>
                                            <th></th>
                                            <th></th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var item in shoppingCart)
                                        {
                                            <tr>
                                                <td>@item.Name</td>
                                                <td>@item.Price</td>
                                                <td>@item.Supplier.Name</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </td>
                            <td>
                                <div style="position: absolute; top:0">
                                    <div>
                                        <h4>Shipping Information</h4>
                                        <table>
                                            <tbody>
                                                <tr>
                                                    <td>Street address:</td>
                                                    <td><input type="text" @bind=order.Address/></td>
                                                </tr>
                                                <tr>
                                                    <td>City:</td>
                                                    <td><input type="text" @bind=order.City /></td>
                                                </tr>
                                                <tr>
                                                    <td>ZipCode:</td>
                                                    <td><input type="text" @bind=order.ZipCode /></td>
                                                </tr>
                                                <tr>
                                                    <td>State:</td>
                                                    <td><input type="text" @bind=order.State /></td>
                                                </tr>
                                                <tr>
                                                    <td>Country:</td>
                                                    <td><input type="text" @bind=order.Country /></td>
                                                </tr>
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </td>
                        </tr>
                    </table>
                </div>
                <div class="col-6">
                </div>
            }
            else
            {
                <h2>Order Successfully placed</h2>
            }
        </div>
    </div>
}
@code {
    OrderDTO order = new();
    double totalPrice;
    bool isConnected;
    List<Item> shoppingCart;
    string customer;
    List<Customer>? customers;
    bool successfulOrder;
    bool selectAnOption;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isConnected = true;
            await LoadStateAsync();
            StateHasChanged();
        }
    }

    private async Task LoadStateAsync()
    {
        var result = await ProtectedLocalStore.GetAsync<List<Item>>("ShoppingCart");
        if (result.Success && result.Value != null)
        {
            shoppingCart = result.Value;
        }
        else
        {
            shoppingCart = new();
        }
        StateHasChanged();
        foreach (var item in shoppingCart)
        {
            totalPrice += item.Price;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var customersArray = await customerService.GetAll();
        if (customersArray == null) customersArray = Array.Empty<Customer>();
        customers = new(customersArray.ToList());
        Console.WriteLine("cheese");
    }

    public async void PlaceOrder()
    {
        if (customer == "" || customer == null)
        {
            selectAnOption = true;
            return;
        }
        order.Customer = await customerService.GetById(Guid.Parse(customer));
        order.DateTime = DateTime.Now;
        order.Item = shoppingCart.ToArray();
        int linesChanged = await orderService.CreateOrder(order);
        if (linesChanged > 0)
        {
            successfulOrder = true;
            await ProtectedLocalStore.DeleteAsync("ShoppingCart");
            StateHasChanged();
        }
    }
}
